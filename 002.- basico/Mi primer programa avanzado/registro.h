/*
	**AQUI SE ENCUENTRAN LOS PROTOTIPOS Q SE ENCARGARAN DE AGREGAR QUITAR Y MODIFICAR
	ELEMENTOS DE NUESTRO REGISTRO
*/

#ifndef __REGISTROS_H__
#define __REGISTROS_H__
//CON ESTA FUNCION VEREMOS TODO LO QUE TENEMOS REGISTRADO
typedef struct TIPO {
	char nombre[30];
	char tipo[10];
	char genero[200];
	char autor[20];
	unsigned int pos;
}Reg;
//CON ESTA FUNCION CREAMOS Y AGREGAMOS UN NUEVO REGISTRO A NUESTRO FICHERO
void new_reg(char *bin,char *tipo);
//CON ESTA FUNCION CREAMOS UN NUEVO REGISTRO
Reg *crear_reg(char *tipo,char *bin);
//CON ESTA FUNCION LEEMOS TODO LO QUE SE ENCUENTRA EN NUESTRO REGISTRO
bool view_all(char *bin);
//CON ESTA FUNCION ESCRIBIMOS TODO LO Q HAY DENTRO DEL PUNTERO QUE PASEMOS COMO PARAMETRO
void print_reg(Reg *aux,int cont);
//CON ESTA FUNCION VEREMOS SI EL ANIME SE ENCUENTRA YA CREADO
bool anime_existente(char *nombre,char *tipo,char *bin);
//CON ESTA FUNCION VEREMOS SOLO LOS MANGAS
bool view_tipo(char *bin,char *tipo);
//ESTA FUNCION MOSTRAR LOS ELEMENTOS CON UN GENERO EN ESPECIFICO
bool view_genero(char *bin,char *g);
//CON ESTA FUNCION SACAREMOS LA LONGITUD DE ELEMENTOS
int length_reg(FILE *fp,char *bin);
//CON ESTA FUNCION REORGANIZAMOS TODA LA FUNCION
void reorganizar_reg(Reg *aux,int n);
//CON ESTA FUNCION INSERTAMOS UN ARRAY DE ELEMENTOS YA REORGANIZADOS DENTRO DE UN FICHERO
void add_reg(Reg *aux,int cont,char *bin);
//CON ESTA FUNCION ELIMAREMOS UN ELEMENTO DEL REGISTRO
void eliminar_elemento(char *bin);
//CON ESTA FUNCION ELIMINAMOS EL ELEMENTO DEL REGISTRO JUNTO CON LA FUNCION ANTERIOR
void delete_element(char *bin,int pos);
//CON ESTA FUNCION GENERAMOS UN ARCHIVO DE TEXTO CON EL REGISTRO
void generar_txt(char *bin);
#endif /*__REGISTROS_H*/

